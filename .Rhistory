if(skip_after) mes <- paste0(mes, "\n")
message(mes)
}
checkPkgs <- function() {
pkg.inst <- installed.packages()
pkgs <- c("RCurl", "digest", "stringr")
have.pkg <- pkgs %in% rownames(pkg.inst)
if(any(!have.pkg)) {
message("\nSome packages need to be installed.\n")
r <- readline("Install necessary packages [y/n]? ")
if(tolower(r) == "y") {
need <- pkgs[!have.pkg]
message("\nInstalling packages ",
paste(need, collapse = ", "))
install.packages(need)
}
}
}
loginPrompt <- function() {
courseid <- get_courseid()
email <- readline("Submission login (email): ")
passwd <- readline("Submission  password: ")
r <- list(courseid = courseid, email = email, passwd = passwd)
assign(".CourseraLogin", r, globalenv())
invisible(r)
}
function(manual = FALSE, resetLogin = FALSE) {
checkPkgs()
suppressPackageStartupMessages(library(RCurl))
library(digest)
library(stringr)
readline("\nPress Enter to continue...")
if(!manual) {
confirmed <- FALSE
need2fix <- FALSE
while(!confirmed) {
if(exists(".CourseraLogin") && !resetLogin && !need2fix)
cred <- get(".CourseraLogin")
else
cred <- loginPrompt()
if(!is.list(cred) || !(names(cred) %in% c("email", "passwd", "courseid")))
stop("problem with login/password")
courseid <- cred$courseid
email <- cred$email
password <- cred$passwd
pretty_out("Is the following information correct?",
skip_after=TRUE)
message("Course ID: ", courseid,
"\nSubmission login (email): ", email,
"\nSubmission password: ", password)
yn <- c("Yes, go ahead!",
"No, I need to change something.")
confirmed <- identical(select.list(yn, graphics=FALSE), yn[1])
if(!confirmed) need2fix <- TRUE
}
## Set urls based on confirmed courseid
challenge.url <- paste("http://class.coursera.org", courseid,
"assignment/challenge", sep = "/")
submit.url <- paste("http://class.coursera.org", courseid,
"assignment/submit", sep = "/")
}
## Prompt Submission Part
sid <- partPrompt()
## Get output
output <- getOutput(sid)
if(!manual) {
## Get challenge
ch <- try(getChallenge(email, challenge.url), silent=TRUE)
## Check if url is valid, i.e. challenge received
ch_ok <- !is(ch, "try-error") && exists("ch.key", ch) && !is.na(ch$ch.key)
if(!ch_ok) {
stop("Either the course ID you entered is not valid or your course site ",
"is unreachable at this time. If you'd like to submit manually, you ",
"can run submit(manual=TRUE).")
}
## Attempt submission with challenge
ch.resp <- challengeResponse(password, ch$ch.key)
results <- submitSolution(email, ch.resp, sid, output, ch$state,
submit.url = submit.url)
if(!length(results))
results <- "Incorrect!"
cat("Result: ", results, "\n")
}
else {
outfile <- paste(sid, "output.txt", sep = "-")
writeLines(as.character(output), outfile)
cat(sprintf("Please upload the file '%s' to Coursera\n",
outfile))
}
invisible()
}
})
submit()
submit()
submit()
getwd()
ls
ls()
cd ..
setwd("~/dan/ProgrammingAssignment2")
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <-x$get()
m <- mean(data,...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y){
x <<- y
m <<-null
}
get <- function()x
setmean <-function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachmean()
cachmean
get(wd)
getwd()
ls()
cachemean()
cachemane(1;10)
cachmean(1:10)
cachemean(1:10)
m = makeVector(c(-1, -2, 1, 1))
cachemean(m)
cachemean(m)
makeCacheMatrix(x, nrow=3, ncol=3){
m =Matrix(x, nrow=3, ncol=3)
m
}
makeCacheMatrix(x, nrow=3, ncol=3){
m = matrix(x, nrow=3, ncol=3)
m
}
makeCacheMatrix(x, nrow=3, ncol=3){
m = matrix(x, nrow=3)
m
}
makeCacheMatrix <- function(x){
m = matrix(x, nrow=3)
m
}
makeCacheMatrix <- function(x){
m = matrix(x, nrow=3)
m
}
makeCacheMatrix(1:9)
makeCacheMatrix <- function(x){
m = matrix(x, nrow=3)
m
solve(m)
m
}
makeCacheMatrix(1:9)
makeCacheMatrix <- function(x){
m <<- matrix(x, nrow=3)
m
}
makeCacheMatrix(1:9)
makeCacheMatrix <- function(x){
m <<- matrix(x, nrow=3)
m
solve(m)
}
makeCacheMatrix(1:9)
makeCacheMatrix <- function(x){
m <<- matrix(x, nrow=3)
m
n =solve(m)
}
makeCacheMatrix(1:9)
makeCacheMatrix <- function(x){
m <<- matrix(x, nrow=3)
m
det(m)
}
makeCacheMatrix(1:9)
makeCacheMatrix <- function(x){
m <<- matrix(x, nrow=3)
print (m)
det(m)
}
makeCacheMatrix(1:9)
makeCacheMatrix <- function(x){
m <<- matrix(x, nrow=3)
print (m)
print (det(m))
solve(m)
}
makeCacheMatrix(1:9)
makeCacheMatrix <- function(x){
m <<- matrix(x, nrow=3)
print (m)
print (det(m))
solve(m) %*% m
m
##solve(x) %*% x
}
makeCacheMatrix(1:9)
makeCacheMatrix(c(3,1,2,8,7,8,1,2,3))
makeCacheMatrix <- function(x){
m <<- matrix(x, nrow=3)
print (m)
print (det(m))
print (solve(m))
m
##solve(x) %*% x
}
makeCacheMatrix(c(3,1,2,8,7,8,1,2,3))
makeCacheMatrix <- function(x){
m <<- matrix(x, nrow=3)
print (m)
print (det(m))
y <- solve(m)
y
##solve(x) %*% x
}
makeCacheMatrix(c(3,1,2,8,7,8,1,2,3))
makeCacheMatrix(c(3,1,2,8,7,8,1,2,3))
m =makeVector(c(1,2,3,4,5))
cachemean(m)
cachemean(m)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
mtrx <- NULL
set <- function(y){
xMatrix <<- y
mtrx  <<-null
}
get <- function()xMatrix
setinverse <- function (y) <<- solve(y)
getinverse <- function () mtrx
list(set=set, get=get, setinv=setinv,getinv=getinv)
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
mtrx <- NULL
set = function(y){
xMatrix <<- y
mtrx  <<-null
}
get <- function()xMatrix
setinverse <- function (y) <<- solve(y)
getinverse <- function () mtrx
list(set=set, get=get, setinv=setinv,getinv=getinv)
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
mtrx <- NULL
set = function(y){
xMatrix <<- y
mtrx  <<-null
}
get <- function()xMatrix
setinverse <- function (y) <<- solve(y)
getinverse <- function () mtrx
list(set=set, get=get, setinv=setinv,getinv=getinv)
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
mtrx <- NULL
set <-function(y){
xMatrix <<- y
mtrx  <<-null
}
get <- function()xMatrix
setinverse <- function (y) <<- solve(y)
getinverse <- function () mtrx
list(set=set, get=get, setinv=setinv,getinv=getinv)
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mtrx = xMatrix$getinv()
if(!is.null(mtrx)) {
message("getting cached data")
return(mtrx)
}
dMatrix = xMatrix$(get)
inv = solve(dMatrix)
xMatrix$seting(inv)
return (inv)
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(xMatrix = matrix()) {
mtrx <- NULL
set <-function(y){
xMatrix <<- y
mtrx  <<-null
}
get <- function()xMatrix
setinverse <- function (y) <<- solve(y)
getinverse <- function () mtrx
list(set=set, get=get, setinv=setinv,getinv=getinv)
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mtrx = xMatrix$getinv()
if(!is.null(mtrx)) {
message("getting cached data")
return(mtrx)
}
dMatrix = xMatrix$(get)
inv = solve(dMatrix)
xMatrix$seting(inv)
return (inv)
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- null
}
get <- function()x
setinverse <- function (inverse) inv <<- inverse
getinverse <- function () inv
list(set=set, get=get, setinv=setinv,getinv=getinv)
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv = x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat.data = x$(get)
inv = solve(mat.data,...)
x$setinv(inv)
return (inv)
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- null
}
get <- function()x
setinverse <- function (inverse) inv <<- inverse
getinverse <- function () inv
list(set=set, get=get, setinv=setinv,getinv=getinv)
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv = x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat.data = x$get()
inv = solve(mat.data,...)
x$setinv(inv)
return (inv)
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- null
}
get <- function()x
setinverse <- function (inverse) inv <<- inverse
getinverse <- function () inv
list(set=set, get=get, setinv=setinv,getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv = x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat.data = x$get()
inv = solve(mat.data,...)
x$setinv(inv)
return (inv)
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- null
}
get <- function()x
setinverse <- function (inverse) inv <<- inverse
getinverse <- function () inv
list(set=set, get=get, setinv=setinv,getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv = x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat.data = x$get()
inv = solve(mat.data,...)
x$setinv(inv)
return (inv)
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- null
}
get <- function()x
setinverse <- function (inverse) inv <<- inverse
getinverse <- function () inv
list(set=set, get=get, setinv=setinv,getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv = x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat.data = x$get()
inv = solve(mat.data,...)
x$setinv(inv)
return (inv)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- null
}
get <- function()x
setinverse <- function (inverse) inv <<- inverse
getinverse <- function () inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv = x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat.data = x$get()
inv = solve(mat.data,...)
x$setinv(inv)
return (inv)
}
makeCacheMatrix <- function(x){
m <<- matrix(x, nrow=3)
print (m)
print (det(m))
y <- solve(m)
y
##solve(x) %*% x
##makeCacheMatrix(c(3,1,2,8,7,8,1,2,3))
}
makeCacheMatrix <- function(x){
m <<- matrix(x, nrow=3)
print (m)
print (det(m))
y <- solve(m)
y
##solve(x) %*% x
##makeCacheMatrix(c(3,1,2,8,7,8,1,2,3))
}
